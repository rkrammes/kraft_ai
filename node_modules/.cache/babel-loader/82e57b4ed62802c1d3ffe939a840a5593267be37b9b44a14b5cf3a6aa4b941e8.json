{"ast":null,"code":"var _jsxFileName = \"/Users/ryankrammes/kraft_ai/src/components/AllIngredients.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllIngredients = () => {\n  _s();\n  const [ingredients, setIngredients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchIngredients = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('Ingredients').select('*');\n        if (error) throw error;\n        setIngredients(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchIngredients();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading ingredients...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'red'\n    },\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, this);\n  if (!ingredients || ingredients.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No ingredients found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ingredients.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" \\u2014 \", item.quantity, \" \", item.unit]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(AllIngredients, \"Te+erJgmNHTOWe/AqE672j5nUVk=\");\n_c = AllIngredients;\nexport default AllIngredients;\nvar _c;\n$RefreshReg$(_c, \"AllIngredients\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","AllIngredients","_s","ingredients","setIngredients","loading","setLoading","error","setError","fetchIngredients","data","from","select","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","map","item","name","quantity","unit","id","_c","$RefreshReg$"],"sources":["/Users/ryankrammes/kraft_ai/src/components/AllIngredients.js"],"sourcesContent":["// @flow\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nconst AllIngredients = (): React$Node => {\n  const [ingredients, setIngredients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchIngredients = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('Ingredients')\n          .select('*');\n        if (error) throw error;\n        setIngredients(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchIngredients();\n  }, []);\n\n  if (loading) return <div>Loading ingredients...</div>;\n  if (error) return <div style={{ color: 'red' }}>Error: {error}</div>;\n  if (!ingredients || ingredients.length === 0) {\n    return <div>No ingredients found.</div>;\n  }\n\n  return (\n    <div>\n      <h2>All Ingredients</h2>\n      <ul>\n        {ingredients.map((item) => (\n          <li key={item.id}>\n            {item.name} â€” {item.quantity} {item.unit}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default AllIngredients;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,cAAc,GAAGA,CAAA,KAAkB;EAAAC,EAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAM;UAAEC,IAAI;UAAEH;QAAM,CAAC,GAAG,MAAMT,QAAQ,CACnCa,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC;QACd,IAAIL,KAAK,EAAE,MAAMA,KAAK;QACtBH,cAAc,CAACM,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZL,QAAQ,CAACK,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDG,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE,oBAAOL,OAAA;IAAAe,QAAA,EAAK;EAAsB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACrD,IAAIZ,KAAK,EAAE,oBAAOP,OAAA;IAAKoB,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAAN,QAAA,GAAC,SAAO,EAACR,KAAK;EAAA;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EACpE,IAAI,CAAChB,WAAW,IAAIA,WAAW,CAACmB,MAAM,KAAK,CAAC,EAAE;IAC5C,oBAAOtB,OAAA;MAAAe,QAAA,EAAK;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACzC;EAEA,oBACEnB,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBnB,OAAA;MAAAe,QAAA,EACGZ,WAAW,CAACoB,GAAG,CAAEC,IAAI,iBACpBxB,OAAA;QAAAe,QAAA,GACGS,IAAI,CAACC,IAAI,EAAC,UAAG,EAACD,IAAI,CAACE,QAAQ,EAAC,GAAC,EAACF,IAAI,CAACG,IAAI;MAAA,GADjCH,IAAI,CAACI,EAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACjB,EAAA,CAxCID,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AA0CpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}