{"ast":null,"code":"var _jsxFileName = \"/Users/ryankrammes/kraft_ai/src/components/RecipeIteration.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport EditableTable from './EditableTable';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RecipeIteration() {\n  _s();\n  const [iterationText, setIterationText] = useState('');\n  const handleGetAiSuggestion = async () => {\n    try {\n      // Replace this placeholder URL with your actual AI endpoint\n      const response = await fetch('https://example.com/ai-suggest', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: iterationText\n        })\n      });\n      const data = await response.json();\n      setIterationText(data.suggestion || '');\n    } catch (err) {\n      console.error('Error fetching AI suggestion:', err);\n    }\n  };\n  const handleCommit = async () => {\n    try {\n      // Insert iteration notes into a new Supabase table named 'Iteration_Notes'\n      const {\n        data,\n        error\n      } = await supabase.from('Iteration_Notes').insert([{\n        notes: iterationText\n      }]).single();\n      if (error) {\n        console.error('Error saving iteration notes:', error);\n      } else {\n        alert('Iteration notes saved successfully!');\n        // Optionally clear the text area after commit:\n        // setIterationText('');\n      }\n    } catch (err) {\n      console.error('Unexpected error:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Ingredients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Distilled Water \\u2013 1 cup (240 mL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Liquid Castile Soap \\u2013 2 tablespoons (30 mL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Sweet Almond Oil \\u2013 1 teaspoon (5 mL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Essential Oils \\u2013 10\\u201315 drops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Next Iteration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: iterationText,\n        onChange: e => setIterationText(e.target.value),\n        placeholder: \"Describe your next iteration...\",\n        style: {\n          width: '100%',\n          minHeight: '80px',\n          marginBottom: '0.5rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGetAiSuggestion,\n          children: \"Get AI Suggestion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCommit,\n          children: \"Commit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditableTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(RecipeIteration, \"F/uP2rzKw3jNgAdYWRjvOY5boLA=\");\n_c = RecipeIteration;\nexport default RecipeIteration;\nvar _c;\n$RefreshReg$(_c, \"RecipeIteration\");","map":{"version":3,"names":["React","useState","EditableTable","supabase","jsxDEV","_jsxDEV","Fragment","_Fragment","RecipeIteration","_s","iterationText","setIterationText","handleGetAiSuggestion","response","fetch","method","headers","body","JSON","stringify","prompt","data","json","suggestion","err","console","error","handleCommit","from","insert","notes","single","alert","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","value","onChange","e","target","placeholder","width","minHeight","marginBottom","display","gap","onClick","_c","$RefreshReg$"],"sources":["/Users/ryankrammes/kraft_ai/src/components/RecipeIteration.js"],"sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport EditableTable from './EditableTable';\nimport { supabase } from '../supabaseClient';\n\nfunction RecipeIteration(): React$Node {\n  const [iterationText, setIterationText] = useState('');\n\n  const handleGetAiSuggestion = async () => {\n    try {\n      // Replace this placeholder URL with your actual AI endpoint\n      const response = await fetch('https://example.com/ai-suggest', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: iterationText }),\n      });\n      const data = await response.json();\n      setIterationText(data.suggestion || '');\n    } catch (err) {\n      console.error('Error fetching AI suggestion:', err);\n    }\n  };\n\n  const handleCommit = async () => {\n    try {\n      // Insert iteration notes into a new Supabase table named 'Iteration_Notes'\n      const { data, error } = await supabase\n        .from('Iteration_Notes')\n        .insert([{ notes: iterationText }])\n        .single();\n      if (error) {\n        console.error('Error saving iteration notes:', error);\n      } else {\n        alert('Iteration notes saved successfully!');\n        // Optionally clear the text area after commit:\n        // setIterationText('');\n      }\n    } catch (err) {\n      console.error('Unexpected error:', err);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"card\">\n        <h2>Current Ingredients</h2>\n        <p>Distilled Water – 1 cup (240 mL)</p>\n        <p>Liquid Castile Soap – 2 tablespoons (30 mL)</p>\n        <p>Sweet Almond Oil – 1 teaspoon (5 mL)</p>\n        <p>Essential Oils – 10–15 drops</p>\n      </div>\n      <div className=\"card\" style={{ marginTop: '1rem' }}>\n        <h2>Next Iteration</h2>\n        <textarea\n          value={iterationText}\n          onChange={(e) => setIterationText(e.target.value)}\n          placeholder=\"Describe your next iteration...\"\n          style={{ width: '100%', minHeight: '80px', marginBottom: '0.5rem' }}\n        />\n        <div style={{ display: 'flex', gap: '0.5rem' }}>\n          <button onClick={handleGetAiSuggestion}>Get AI Suggestion</button>\n          <button onClick={handleCommit}>Commit</button>\n        </div>\n      </div>\n      <EditableTable />\n    </>\n  );\n}\n\nexport default RecipeIteration;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}